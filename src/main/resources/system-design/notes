Notes:
1) Vertical Scaling = Optimize process and increase throughput with the same resource
2) Preprocessing/Cron Job = Preparing beforehand during non-peak hours
3) BackUps (Master/Slave) = Avoid single point of failure
4) Horizontal Machine = More Machines
5) MicroService = Dividing responsibilities and scalable
6) Distributed System = Failure and fast response
7) Load Balancer = Intelligent way to route request and avoid duplicates to various server
8) Decoupling and Extensible
9) Logging and Metrics - Analytics, Auditing, Reporting, ML
===
Consistent Hashing maps servers to the key space and assigns requests(mapped to relevant buckets, called load) to the next clockwise server.
Servers can then store relevant request data in them while allowing the system flexibility and scalability.
===
HeartBeat detect if server is down.
===
MessageQueue - Take Task, persist them, assign to correct server, wait for it to complete, if taking too long feels server is dead, assign to new server.
Load Balancing + HeartBeat
eg. RabbitMQ
===
Netflix
Video - multiple format *  multiple resolution * multiple chunks (scene based - combination of smaller timestamp) = single task
chunks = in sec
amazon s3
Open Connect(90% total content at HardDrive at ISP with Movies) Netflix Open Connect program is to provide our millions of Netflix subscribers the highest-quality viewing experience possible.
We achieve this goal by partnering with Internet Service Providers (ISPs) to deliver our content more efficiently
===
Tinder
1) Store Profiles (Images) - 5 images per user - CDN for store images as file in distributed env
2) Recommend matches - no of active users
3) Note matches - active(swipe) x .1 %
4) direct messaging
HTTP - client server communication protocol - it needs client to ask from server OR LONG POLLING for keep asking server if any message
WEBSOCKET (WSS) - peer to peer - xmpp via TCP/websocket - Session Service (connectionid, user1, user2)
===
Cache
1) Save Network Calls
2) Avoid re-computations
3) Avoid load on database
4) Eviction policy - LRU (latest on top) / LFU (Most Used at top) / Windows Sliding (steam media - few secs of each videos on cache) / Caffeine (decides which objects should be deleted at any given time.)
5) Thrashing
6) In memory on Server (Memcache), Global Cache (Redis - persistent storage)
7) Write through Cache (update both cache+db), Write back(delete cache + update db) - good to have hybrid i.e. both
===
Whatsapp
1) Group Message
2) Sent, Delivered, read receipt
3) Online, Last seen
4) image sharing
5) chat temp / permanent
6) one to one chat

Multiple Gateway connected to Session API backed by DB (each session api send message directly to user)
Multiple Message Queue with retry (certain number) having threads
===
Event Driven
each service has its own db
===
instagram (newsfeed)
1) store/get images
2) like+comment (post) - recursive - (likes table)type/active/parentid/userid/ts  - (post table)id,text,image,ts - (comment)id/text/ts - (activity) id/likes_tot
profile service/userfeed service/post service/like service/follow service/
===
memory
i/o
processor
disk